from flask.ext.sqlalchemy import SQLAlchemy
from flask.ext.login import UserMixin
from werkzeug import generate_password_hash, check_password_hash
from app import app
from datetime import datetime
import sqlalchemy.types as types
import os
import os.path

db = SQLAlchemy(app)


################################################
#
#
#              Table Implementations
#
#
################################################

class User(db.Model, UserMixin):
    """User table class
    functions include:
    check/setting passwords
    """
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key = True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    pwdhash = db.Column(db.String(160), nullable=False)
    firstname = db.Column(db.String(120), nullable=False)
    middlename = db.Column(db.String(120))
    lastname = db.Column(db.String(120), nullable=False)
    authority = db.Column(db.Integer, nullable=False)

    def __init__(self, email, password, firstname, middlename, lastname, authority):
        self.email = email.lower()
        self.set_password(password)
        self.firstname = firstname
        self.middlename = middlename
        self.lastname = lastname
        self.authority = authority

    def set_password(self, password):
        self.pwdhash = generate_password_hash(password)
        db.session.commit()

    def check_password(self, password):
        return check_password_hash(self.pwdhash, password)

    def getFileDir(self):
        curr_dir = os.getcwd()
        curr_dir += '/app/static/user_data/' + str(self.email) + '/data/'
        return curr_dir

    def getUserData(self):
        curr_dir = os.getcwd()
        curr_dir += '/app/static/user_data/' + str(self.email) + '/user.dat'
        return curr_dir

    def getImageDir(self):
        curr_dir = os.getcwd()
        curr_dir += '/app/static/img/'
        return curr_dir

    def checkHash(password):
        return generate_password_hash(password)

    def set(self, tableName,tableValues):
        targetTable = eval(tableName)
        db.session.add(targetTable(**tableValues))
        db.session.commit()

    def update(self, tableName, tid, tableValues):
        targetTable = eval(tableName)
        db.session.query(targetTable).filter(targetTable.id == tid).update(tableValues)
        db.session.commit()


class Project(db.Model):
    __tablename__ = 'project'
    id                    = db.Column(db.Integer, primary_key = True)
    name                  = db.Column(db.String(120))
    userID                = db.Column(db.Integer, db.ForeignKey('users.id'))
    projectAddress        = db.Column(db.String(300))
    projectFaxNumber      = db.Column(db.BigInteger)
    projectPhoneNumber    = db.Column(db.BigInteger)
    responsibleIndividual = db.Column(db.Integer, db.ForeignKey('personnel.id'))
    LinkToProjectInfor    = db.Column(db.String(300))
    users = db.relationship('User')
    personnel = db.relationship('Personnel')



    def __init__(self, name, userID, projectAddress, projectFaxNumber, projectPhoneNumber, responsibleIndividual, LinkToProjectInfor):
        self.name = name
        self.userID = userID
        self.projectAddress = projectAddress
        self.projectFaxNumber = projectFaxNumber
        self.projectPhoneNumber = projectPhoneNumber
        self.responsibleIndividual = responsibleIndividual
        self.LinkToProjectInfor = LinkToProjectInfor

    def to_json(self):
        return {
            'id':self.id,
            'name':self.name,
            'userID':self.userID,
            'projectAddress':self.projectAddress,
            'projectFaxNumber':self.projectFaxNumber,
            'projectPhoneNumber':self.projectPhoneNumber,
            'responsibleIndividual':self.responsibleIndividual,
            'LinkToProjectInfor':self.LinkToProjectInfor,
        }
        
class Organization(db.Model):
    __tablename__ = 'organization'
    id = db.Column(db.Integer, primary_key = True)
    name = db.Column(db.String(120), nullable = False)
    address1 = db.Column(db.String(120))
    address2 = db.Column(db.String(120))
    city = db.Column(db.String(120))
    state = db.Column(db.String(20))
    zipCode = db.Column(db.Integer)
    phoneNumber = db.Column(db.BigInteger)
    firmtypeID = db.Column(db.Integer, db.ForeignKey('firmtype.id'))
    ownerID = db.Column(db.Integer, db.ForeignKey('users.id'), nullable = False)
    webpage = db.Column(db.String(200), nullable=True)
    imgDir = db.Column(db.String(200), nullable=True)
    firmtype = db.relationship('Firmtype')

    def __init__(self, name, address1, address2, city, state, zipCode, phoneNumber, firmtypeID, ownerID, webpage, imgDir):
        self.name = name
        self.address1 = address1
        self.address2 = address2
        self.city = city
        self.state = state
        self.zipCode = zipCode
        self.phoneNumber = phoneNumber
        self.firmtypeID = firmtypeID
        self.ownerID = ownerID
        self.webpage = webpage
        self.imgDir = imgDir
        
class Firmtype(db.Model):
    __tablename__ = 'firmtype'
    id = db.Column(db.Integer, primary_key = True)
    name = db.Column(db.String(120))

    def __init__(self, name):
        self.name = name


personnel_project_association_table = db.Table('personnel_project_association', db.Model.metadata,
                                            db.Column('personnelID', db.Integer, db.ForeignKey('personnel.id')),
                                            db.Column('projectID', db.Integer, db.ForeignKey('project.id')))
class Personnel(db.Model):
    __tablename__ = 'personnel'
    id             = db.Column(db.Integer, primary_key = True)
    firstname      = db.Column(db.String(120))
    lastname       =  db.Column(db.String(120))
    address1       = db.Column(db.String(120))
    address2       = db.Column(db.String(120))
    city           = db.Column(db.String(120))
    state          = db.Column(db.String(20))
    zipCode        = db.Column(db.Integer)
    phoneNumber    = db.Column(db.BigInteger)
    email          = db.Column(db.String(120), unique=True)
    role           = db.Column(db.String(120))
    webpage        = db.Column(db.String(200), nullable=True)
    imgDir         = db.Column(db.String(200), nullable=True)
    organizationID = db.Column(db.Integer, db.ForeignKey('organization.id'))
    userID         = db.Column(db.Integer, db.ForeignKey('users.id'))
    projects       = db.relationship("Project",secondary='personnel_project_association')
    organization = db.relationship('Organization')
    
 
    def __init__(self, firstname,lastname,address1,address2,city,state,zipCode,phoneNumber,email,role,webpage,imgDir,organizationID,userID):
        self.firstname = firstname
        self.lastname = lastname
        self.address1 = address1
        self.address2 = address2
        self.city = city
        self.state = state
        self.zipCode = zipCode
        self.phoneNumber = phoneNumber
        self.email = email
        self.role = role
        self.webpage = webpage
        self.imgDir = imgDir
        self.organizationID = organizationID
        self.userID = userID
        
    def to_json(self):
        return {
            'id':self.id,
            'firstname':self.firstname,
            'lastname':self.lastname,
            'address1':self.address1,
            'address2':self.address2,
            'city':self.city,
            'state':self.state,
            'zipCode':self.zipCode,
            'phoneNumber':self.phoneNumber,
            'email':self.email,
            'role':self.role,
            'webpage':self.webpage,
            'imgDir':self.imgDir,
            'organizationID':self.organizationID,
            'userID':self.userID,
            'projects': map(lambda x:x.to_json(),self.projects)
        }             
        
class Schedule(db.Model):
    __tablename__ = 'schedule'
    id = db.Column(db.Integer, primary_key = True)
    projectID = db.Column(db.Integer, db.ForeignKey('project.id'))
    project = db.relationship('Project')

    def __init__(self, projectID):
        self.projectID = projectID

class Task(db.Model):
    __tablename__ = 'task'
    id = db.Column(db.Integer, primary_key = True)
    name = db.Column(db.String(120))
    scheduleID = db.Column(db.Integer, db.ForeignKey('schedule.id'))
    requestor = db.Column(db.Integer, db.ForeignKey('personnel.id'))
    personCommitted = db.Column(db.Integer, db.ForeignKey('personnel.id'))
    responsibleSubs = db.Column(db.Integer, db.ForeignKey('organization.id'))
    startDate = db.Column(db.DateTime)
    endDate = db.Column(db.DateTime)
    actualStartDate = db.Column(db.DateTime)
    duration = db.Column(db.Float)
    taskPredecessor = db.Column(db.Integer, db.ForeignKey('task.id'), nullable=True)
    taskSuccessor = db.Column(db.Integer, db.ForeignKey('task.id'), nullable=True)
    taskConstraints = db.Column(db.Integer, db.ForeignKey('constraints.id'))
    taskPerformance = db.Column(db.Integer, db.ForeignKey('performance.id'))
    taskAnticipated = db.Column(db.Integer)
    taskPerformanceVariance = db.Column(db.Integer, db.ForeignKey('performanceVariance.id')) 
    taskRepeated = db.Column(db.Integer)
    elements =  db.Column(db.Integer, db.ForeignKey('objects.id'))
    def __init__(self, name, scheduleID, requestor, personCommitted, responsibleSubs, startDate, endDate,
                 actualStartDate, duration, taskPredecessor, taskSuccessor, taskConstraints, taskPerformance,
                 taskAnticipated, taskPerformanceVariance,taskRepeated, elements):
        self.name = name
        self.scheduleID = scheduleID
        self.requestor = requestor
        self.personCommitted = personCommitted
        self.responsibleSubs = responsibleSubs
        self.startDate = startDate
        self.endDate = endDate
        self.actualStartDate = actualStartDate
        self.duration = duration
        self.taskPredecessor = taskPredecessor
        self.taskSuccessor = taskSuccessor
        self.taskConstraints = taskConstraints
        self.taskPerformance = taskPerformance
        self.taskAnticipated = taskAnticipated
        self.taskPerformanceVariance = taskPerformanceVariance
        self.taskRepeated = taskRepeated
        self.elements =  elements
        
class Constraints(db.Model):
    __tablename__ = 'constraints'
    id = db.Column(db.Integer, primary_key = True)
    relatedID = db.Column(db.Integer)
    description = db.Column(db.String(1000))
    responsibleIndividual = db.Column(db.Integer, db.ForeignKey('personnel.id'))
    initiateDate = db.Column(db.DateTime) 
    promiseDate = db.Column(db.DateTime) 
    completeDate = db.Column(db.DateTime) 
    revisePromiseCompletion = db.Column(db.Integer, db.ForeignKey('promise.id'))
    constraintVariance = db.Column(db.Integer, db.ForeignKey('performanceVariance.id')) 
    Personnel = db.relationship('Personnel')
    promise = db.relationship('Promise')
    performanceVariance = db.relationship('PerformanceVariance')

    def __init__(self, relatedID,description,responsibleIndividual,initiateDate,promiseDate,completeDate,revisePromiseCompletion,constraintVariance):
        self.relatedID = relatedID
        self.description = description
        self.responsibleIndividual = responsibleIndividual
        self.initiateDate = initiateDate
        self.promiseDate = promiseDate
        self.completeDate = completeDate
        self.revisePromiseCompletion = revisePromiseCompletion
        self.constraintVariance = constraintVariance


class Promise(db.Model):
    __tablename__ = 'promise'
    id = db.Column(db.Integer, primary_key = True)
    name = db.Column(db.String(120))

    def __init__(self, name):
        self.name = name

class Performance(db.Model):
    __tablename__ = 'performance'
    id = db.Column(db.Integer, primary_key = True)
    scheduleID = db.Column(db.Integer, db.ForeignKey('schedule.id'))
    ppc = db.Column(db.Float)
    taskMadeReady = db.Column(db.Float)
    maturityLevel = db.Column(db.Float)
    variance = db.Column(db.Float)
    status = db.Column(db.Integer, db.ForeignKey('taskStatus.id'))
    taskStatus = db.relationship('TaskStatus')

    def __init__(self, scheduleID, ppc, taskMadeReady, maturityLevel, variance, status):
        self.scheduleID = scheduleID
        self.ppc = ppc
        self.taskMadeReady = taskMadeReady
        self.maturityLevel = maturityLevel
        self.variance = variance
        self.status = status

class PerformanceVariance(db.Model):
    __tablename__ = 'performanceVariance'
    id = db.Column(db.Integer, primary_key = True)
    name = db.Column(db.String(120))
    def __init__(self, name):
        self.name = name


class TaskStatus(db.Model):
    __tablename__ = 'taskStatus'
    id = db.Column(db.Integer, primary_key = True)
    name = db.Column(db.String(120))
    def __init__(self, name):
        self.name = name

class Objects(db.Model):
    __tablename__ = 'objects'
    id = db.Column(db.Integer, primary_key = True)
    projectID = db.Column(db.Integer, db.ForeignKey('project.id'))
    name = db.Column(db.String(120))

    def __init__(self,  projectID, name):
        self.projectID = projectID
        self.name = name

class IFCElement(db.Model):
    __tablename__ = 'ifcelement'
    id = db.Column(db.Integer, primary_key = True)
    objectsID = db.Column(db.Integer, db.ForeignKey('objects.id'))
    name = db.Column(db.String(120))
    type = db.Column(db.String(120))
    pos = db.Column(db.Float())

    def __init(self,objectsID, name, type, pos ):
        self.name = name
        self.objectsID = objectsID
        self.type = type
        self.pos = pos

class Location(db.Model):
    __tablename__ = 'location'
    id = db.Column(db.Integer, primary_key = True)
    objectsID = db.Column(db.Integer, db.ForeignKey('objects.id'))
    name = db.Column(db.String(120))
    type = db.Column(db.String(120))
    pos = db.Column(db.Float())

    def __init(self,objectsID, name, type, pos ):
        self.name = name
        self.objectsID = objectsID
        self.type = type
        self.pos = pos
